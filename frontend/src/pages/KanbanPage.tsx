import React, { useEffect, useState } from "react";
import { useParams } from "react-router-dom";
import axios from "axios";
import { getColumns, createColumn, updateColumn, deleteColumn } from "../api/columns";
import { createTask, deleteTask, updateTask } from "../api/tasks";
import Column from "../components/Column";
import "../styles/kanban.css";
import { DragDropContext, DropResult } from "@hello-pangea/dnd";

interface Task {
  id: number;
  name: string;
  description?: string;
  column_id: number;
  position: number;
}

interface ColumnType {
  id: number;
  name: string;
  tasks: Task[];
}

const gradientOptions = [
  { label: "‡∏°‡πà‡∏ß‡∏á-‡∏ô‡πâ‡∏≥‡πÄ‡∏á‡∏¥‡∏ô", value: "linear-gradient(135deg, #667eea 0%, #764ba2 100%)" },
  { label: "‡∏ä‡∏°‡∏û‡∏π-‡πÅ‡∏î‡∏á", value: "linear-gradient(135deg, #f093fb 0%, #f5576c 100%)" },
  { label: "‡πÄ‡∏Ç‡∏µ‡∏¢‡∏ß-‡∏ü‡πâ‡∏≤", value: "linear-gradient(135deg, #43e97b 0%, #38f9d7 100%)" },
  { label: "‡∏ü‡πâ‡∏≤-‡∏ô‡πâ‡∏≥‡πÄ‡∏á‡∏¥‡∏ô‡πÄ‡∏Ç‡πâ‡∏°", value: "linear-gradient(135deg, #30cfd0 0%, #330867 100%)" },

  { label: "‡∏û‡∏≤‡∏™‡πÄ‡∏ó‡∏• ‡∏ü‡πâ‡∏≤-‡∏ä‡∏°‡∏û‡∏π", value: "linear-gradient(135deg, #a1c4fd 0%, #c2e9fb 100%)" },
  { label: "‡∏û‡∏≤‡∏™‡πÄ‡∏ó‡∏• ‡πÄ‡∏´‡∏•‡∏∑‡∏≠‡∏á-‡∏™‡πâ‡∏°", value: "linear-gradient(135deg, #fddb92 0%, #d1fdff 100%)" },
  { label: "‡∏û‡∏≤‡∏™‡πÄ‡∏ó‡∏• ‡πÄ‡∏Ç‡∏µ‡∏¢‡∏ß-‡∏ü‡πâ‡∏≤", value: "linear-gradient(135deg, #d4fc79 0%, #96e6a1 100%)" },
  { label: "‡∏û‡∏≤‡∏™‡πÄ‡∏ó‡∏• ‡∏ä‡∏°‡∏û‡∏π-‡∏°‡πà‡∏ß‡∏á", value: "linear-gradient(135deg, #fbc2eb 0%, #a6c1ee 100%)" },
  { label: "‡∏û‡∏≤‡∏™‡πÄ‡∏ó‡∏• ‡∏°‡πà‡∏ß‡∏á-‡∏ü‡πâ‡∏≤", value: "linear-gradient(135deg, #e0c3fc 0%, #8ec5fc 100%)" },
];

const KanbanPage: React.FC = () => {
  const { id } = useParams<{ id: string }>();
  const boardId = Number(id);
  const [columns, setColumns] = useState<ColumnType[]>([]);
  const [loading, setLoading] = useState(true);
  const [newColumnName, setNewColumnName] = useState("");
  const [boardName, setBoardName] = useState("");
  const [backgroundGradient, setBackgroundGradient] = useState(
    localStorage.getItem("kanbanGradient") || gradientOptions[0].value
  );

  const token = localStorage.getItem("token");

  const fetchColumns = async () => {
    try {
      const data = await getColumns(boardId);
      setColumns(data);
    } catch (err) {
      console.error("‡πÇ‡∏´‡∏•‡∏î column ‡πÑ‡∏°‡πà‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à:", err);
    } finally {
      setLoading(false);
    }
  };

  const fetchBoardName = async () => {
    if (!token) {
      console.warn("‡πÑ‡∏°‡πà‡∏û‡∏ö token ‚Äî ‡∏Ç‡πâ‡∏≤‡∏°‡∏Å‡∏≤‡∏£‡πÇ‡∏´‡∏•‡∏î‡∏ä‡∏∑‡πà‡∏≠‡∏ö‡∏≠‡∏£‡πå‡∏î");
      return;
    }

    try {
      const response = await axios.get(`http://localhost:8000/boards/${boardId}`, {
        headers: {
          Authorization: `Bearer ${token}`,
        },
      });

      const board = response.data;
      if (board?.name) {
        setBoardName(board.name);
      } else {
        console.warn("‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏ä‡∏∑‡πà‡∏≠‡∏ö‡∏≠‡∏£‡πå‡∏î‡πÉ‡∏ô‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡∏µ‡πà‡πÑ‡∏î‡πâ‡∏£‡∏±‡∏ö");
      }
    } catch (error: any) {
      console.error("‚ùå ‡πÇ‡∏´‡∏•‡∏î‡∏ä‡∏∑‡πà‡∏≠‡∏ö‡∏≠‡∏£‡πå‡∏î‡πÑ‡∏°‡πà‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à:", error?.response?.data || error.message);
    }
  };

  const handleAddColumn = async () => {
    if (!newColumnName.trim()) return;
    try {
      await createColumn(newColumnName, boardId);
      setNewColumnName("");
      fetchColumns();
    } catch (err) {
      console.error("‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏Ñ‡∏≠‡∏•‡∏±‡∏°‡∏ô‡πå‡πÑ‡∏°‡πà‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à:", err);
    }
  };

  const handleRenameColumn = async (columnId: number, newName: string) => {
    try {
      await updateColumn(columnId, newName);
      fetchColumns();
    } catch (err) {
      console.error("‡πÅ‡∏Å‡πâ‡∏ä‡∏∑‡πà‡∏≠‡∏Ñ‡∏≠‡∏•‡∏±‡∏°‡∏ô‡πå‡πÑ‡∏°‡πà‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à:", err);
    }
  };

  const handleDeleteColumn = async (columnId: number) => {
    if (!window.confirm("‡∏Ñ‡∏∏‡∏ì‡πÅ‡∏ô‡πà‡πÉ‡∏à‡∏ß‡πà‡∏≤‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡∏•‡∏ö‡∏Ñ‡∏≠‡∏•‡∏±‡∏°‡∏ô‡πå‡∏ô‡∏µ‡πâ?")) return;
    try {
      await deleteColumn(columnId);
      fetchColumns();
    } catch (err) {
      console.error("‡∏•‡∏ö‡∏Ñ‡∏≠‡∏•‡∏±‡∏°‡∏ô‡πå‡πÑ‡∏°‡πà‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à:", err);
    }
  };

  const handleAddTask = async (columnId: number, taskName: string) => {
    try {
      await createTask(columnId, taskName);
      fetchColumns();
    } catch (err) {
      console.error("‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏Å‡∏≤‡∏£‡πå‡∏î‡πÑ‡∏°‡πà‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à:", err);
    }
  };

  const handleEditTask = async (taskId: number, updates: Partial<Task>) => {
    try {
      await updateTask(taskId, updates);
      fetchColumns();
    } catch (err) {
      console.error("‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç‡∏Å‡∏≤‡∏£‡πå‡∏î‡πÑ‡∏°‡πà‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à:", err);
    }
  };

  const handleDeleteTask = async (taskId: number) => {
    try {
      await deleteTask(taskId);
      fetchColumns();
    } catch (err) {
      console.error("‡∏•‡∏ö‡∏Å‡∏≤‡∏£‡πå‡∏î‡πÑ‡∏°‡πà‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à:", err);
    }
  };

  const handleDragEnd = async (result: DropResult) => {
    const { source, destination, draggableId } = result;
    if (!destination) return;

    const taskId = parseInt(draggableId.replace("task-", ""));
    const sourceColId = parseInt(source.droppableId.replace("column-", ""));
    const destColId = parseInt(destination.droppableId.replace("column-", ""));

    if (sourceColId === destColId && source.index === destination.index) return;

    const updatedColumns = [...columns];
    const sourceCol = updatedColumns.find((col) => col.id === sourceColId);
    const destCol = updatedColumns.find((col) => col.id === destColId);
    if (!sourceCol || !destCol) return;

    const sourceTasks = [...(sourceCol.tasks || [])];
    const destTasks = sourceColId === destColId ? sourceTasks : [...(destCol.tasks || [])];

    const [movedTask] = sourceTasks.splice(source.index, 1);
    destTasks.splice(destination.index, 0, movedTask);

    try {
      await updateTask(taskId, {
        column_id: destColId,
        position: destination.index,
      });
      fetchColumns();
    } catch (err) {
      console.error("‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï Task ‡πÑ‡∏°‡πà‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à:", err);
    }
  };

  const handleGradientChange = (value: string) => {
    setBackgroundGradient(value);
    localStorage.setItem("kanbanGradient", value);
  };

  useEffect(() => {
    fetchColumns();
    fetchBoardName();
  }, [boardId]);

  return (
    <div className="kanban-page" style={{ background: backgroundGradient }}>
      <h2 className="kanban-header">{boardName ? `‡∏ö‡∏≠‡∏£‡πå‡∏î: ${boardName}` : `‡∏ö‡∏≠‡∏£‡πå‡∏î #${boardId}`}</h2>

      <div className="gradient-selector">
  <label htmlFor="gradientSelect" className="gradient-label">
    üé® ‡∏û‡∏∑‡πâ‡∏ô‡∏´‡∏•‡∏±‡∏á:
  </label>
  <select
    id="gradientSelect"
    value={backgroundGradient}
    onChange={(e) => handleGradientChange(e.target.value)}
    className="gradient-dropdown"
  >
    {gradientOptions.map((option) => (
      <option key={option.value} value={option.value}>
        {option.label}
      </option>
    ))}
  </select>
</div>

      {loading ? (
        <p className="kanban-loading">‡∏Å‡∏≥‡∏•‡∏±‡∏á‡πÇ‡∏´‡∏•‡∏î...</p>
      ) : (
        <DragDropContext onDragEnd={handleDragEnd}>
          <div className="kanban-columns">
            {columns.map((col, index) => (
              <Column
                key={col.id}
                id={col.id}
                name={col.name}
                index={index}
                tasks={col.tasks}
                onDelete={handleDeleteColumn}
                onRename={handleRenameColumn}
                onAddTask={handleAddTask}
                onEditTask={handleEditTask}
                onDeleteTask={handleDeleteTask}
              />
            ))}

            <div className="add-column-box">
              <h3 className="column-title">‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏Ñ‡∏≠‡∏•‡∏±‡∏°‡∏ô‡πå‡πÉ‡∏´‡∏°‡πà</h3>
              <input
                type="text"
                className="kanban-input"
                placeholder="‡∏ä‡∏∑‡πà‡∏≠‡∏Ñ‡∏≠‡∏•‡∏±‡∏°‡∏ô‡πå‡πÉ‡∏´‡∏°‡πà"
                value={newColumnName}
                onChange={(e) => setNewColumnName(e.target.value)}
              />
              <button onClick={handleAddColumn} className="kanban-button">
                + ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏Ñ‡∏≠‡∏•‡∏±‡∏°‡∏ô‡πå
              </button>
            </div>
          </div>
        </DragDropContext>
      )}
    </div>
  );
};

export default KanbanPage;
